var documenterSearchIndex = {"docs":
[{"location":"concepts/concepts.html#","page":"Concepts","title":"Concepts","text":"Table of contents","category":"page"},{"location":"concepts/concepts.html#Concepts-about-the-design-and-operation-1","page":"Concepts","title":"Concepts about the design and operation","text":"","category":"section"},{"location":"concepts/concepts.html#","page":"Concepts","title":"Concepts","text":"Needs to be written.","category":"page"},{"location":"guide/guide.html#","page":"How to guide","title":"How to guide","text":"Table of contents","category":"page"},{"location":"guide/guide.html#How-to-Guide-1","page":"How to guide","title":"How to Guide","text":"","category":"section"},{"location":"guide/guide.html#","page":"How to guide","title":"How to guide","text":"Needs to be written.","category":"page"},{"location":"index.html#Elfel-Documentation-1","page":"Home","title":"Elfel Documentation","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"Elfel provides support for the development of Finite Element Method applications, especially in the area of continuum mechanics. Mixed methods with cooperating finite element spaces are supported. High performance is one of the focus points.","category":"page"},{"location":"index.html#How-to-guide-1","page":"Home","title":"How to guide","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"The recipes.","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"Pages = [\n    \"guide/guide.md\",\n]\nDepth = 1","category":"page"},{"location":"index.html#Manual-1","page":"Home","title":"Manual","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"The description of the types and of the functions.","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"Pages = [\n    \"man/types.md\",\n    \"man/functions.md\",\n]\nDepth = 1","category":"page"},{"location":"index.html#Concepts-1","page":"Home","title":"Concepts","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"The concepts and ideas are described.","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"Pages = [\n    \"concepts/concepts.md\",\n]\nDepth = 1","category":"page"},{"location":"man/types.html#Types-1","page":"Types","title":"Types","text":"","category":"section"},{"location":"man/types.html#Reference-shapes-1","page":"Types","title":"Reference shapes","text":"","category":"section"},{"location":"man/types.html#","page":"Types","title":"Types","text":"CurrentModule = Elfel","category":"page"},{"location":"man/types.html#","page":"Types","title":"Types","text":"RefShapes.AbstractRefShape\nRefShapes.RefShapePoint\nRefShapes.RefShapeInterval\nRefShapes.RefShapeSquare\nRefShapes.RefShapeCube\nRefShapes.RefShapeTriangle\nRefShapes.RefShapeTetrahedron\nRefShapes.IntegRule","category":"page"},{"location":"man/types.html#Elfel.RefShapes.AbstractRefShape","page":"Types","title":"Elfel.RefShapes.AbstractRefShape","text":"AbstractRefShape{MANIFDIM}\n\nAbstract type of a reference shape.\n\n\n\n\n\n","category":"type"},{"location":"man/types.html#Elfel.RefShapes.RefShapePoint","page":"Types","title":"Elfel.RefShapes.RefShapePoint","text":"RefShapePoint <: AbstractRefShape{0}\n\nType of a reference shape for a zero-dimensional manifold (point).\n\n\n\n\n\n","category":"type"},{"location":"man/types.html#Elfel.RefShapes.RefShapeInterval","page":"Types","title":"Elfel.RefShapes.RefShapeInterval","text":"RefShapeInterval <: AbstractRefShape{1}\n\nType of a reference shape for a 1-dimensional manifold (curve).\n\n\n\n\n\n","category":"type"},{"location":"man/types.html#Elfel.RefShapes.RefShapeSquare","page":"Types","title":"Elfel.RefShapes.RefShapeSquare","text":"RefShapeSquare <: AbstractRefShape{2}\n\nType of a logically rectangular reference shape for a 2-dimensional manifold  (surface).\n\n\n\n\n\n","category":"type"},{"location":"man/types.html#Elfel.RefShapes.RefShapeCube","page":"Types","title":"Elfel.RefShapes.RefShapeCube","text":"RefShapeCube <: AbstractRefShape{3}\n\nType of a reference shape for a 3-dimensional manifold (solid) bounded by six quadrilaterals.\n\n\n\n\n\n","category":"type"},{"location":"man/types.html#Elfel.RefShapes.RefShapeTriangle","page":"Types","title":"Elfel.RefShapes.RefShapeTriangle","text":"RefShapeTriangle <: AbstractRefShape{2}\n\nType of a logically triangular reference shape for a 2-dimensional manifold  (surface).\n\n\n\n\n\n","category":"type"},{"location":"man/types.html#Elfel.RefShapes.RefShapeTetrahedron","page":"Types","title":"Elfel.RefShapes.RefShapeTetrahedron","text":"RefShapeTetrahedron <: AbstractRefShape{3}\n\nType of a reference shape for a 3-dimensional manifold (solid) bounded by 4 triangles.\n\n\n\n\n\n","category":"type"},{"location":"man/types.html#Elfel.RefShapes.IntegRule","page":"Types","title":"Elfel.RefShapes.IntegRule","text":"IntegRule\n\nType for integration rule.\n\n\n\n\n\n","category":"type"},{"location":"man/types.html#Elements-1","page":"Types","title":"Elements","text":"","category":"section"},{"location":"man/types.html#","page":"Types","title":"Types","text":"FElements.FE\nFElements.FEData","category":"page"},{"location":"man/types.html#Elfel.FElements.FE","page":"Types","title":"Elfel.FElements.FE","text":"FE{RS, SD}\n\nAbstract type of finite element, parameterized by\n\nRS: type of reference shape of the element (triangle, square, ...), and\nSD: shape descriptor; refer to the package MeshCore.\n\n\n\n\n\n","category":"type"},{"location":"man/types.html#Elfel.FElements.FEData","page":"Types","title":"Elfel.FElements.FEData","text":"FEData{SD}\n\nType of a finite element data. \n\nParameterized by\n\nSD = shape descriptor; refer to the package MeshCore.\n\n\n\n\n\n","category":"type"},{"location":"man/types.html#Fields-1","page":"Types","title":"Fields","text":"","category":"section"},{"location":"man/types.html#","page":"Types","title":"Types","text":"FEFields.FEField","category":"page"},{"location":"man/types.html#Elfel.FEFields.FEField","page":"Types","title":"Elfel.FEFields.FEField","text":"FEField{N, T, IT}\n\nType of a finite element field. Parameterized with\n\nN: number of degrees of freedom per entity, \nT: type of the degree of freedom value, \nIT: type of the index (integer value). This describes the serial numbers of the degrees of freedom.\n\n\n\n\n\n","category":"type"},{"location":"man/types.html#Spaces-1","page":"Types","title":"Spaces","text":"","category":"section"},{"location":"man/types.html#","page":"Types","title":"Types","text":"FESpaces.FESpace","category":"page"},{"location":"man/types.html#Elfel.FESpaces.FESpace","page":"Types","title":"Elfel.FESpaces.FESpace","text":"FESpace{FET, T}\n\nType of a finite element space, parameterized with\n\nFET: type of finite element, it is a scalar finite element, \nT: type of degree of freedom value (double, complex, ...).\n\n\n\n\n\n","category":"type"},{"location":"man/types.html#Finite-element-iterators-1","page":"Types","title":"Finite element iterators","text":"","category":"section"},{"location":"man/types.html#","page":"Types","title":"Types","text":"FEIterators.FEIterator","category":"page"},{"location":"man/types.html#Elfel.FEIterators.FEIterator","page":"Types","title":"Elfel.FEIterators.FEIterator","text":"FEIterator{FES, IR, G, IT, T, V, IR0, IR1, IR2, IR3, F0, F1, F2, F3}\n\nType of finite element iterator. Parameterized with the types of\n\nFES: finite element space,\nIR: base incidence relation of the mesh, \nG: type of the geometry attribute, \nIT: type of integer indices, such as the  numbers of nodes and degrees of freedom, \nT: type of the degree of freedom value (real double, complex float, ... ), \nV: Val representation of the manifold dimension of the base relation elements, \nIR0, IR1, IR2, IR3: types of incidence relations with which degrees of freedom are associated in the finite element space, for each of the manifolds dimensions 0, 1, 2, 3, \nF0, F1, F2, F3: types of fields with which degrees of freedom are associated in the finite element space, for each of the manifolds dimensions 0, 1, 2, 3.\n\n\n\n\n\n","category":"type"},{"location":"man/types.html#Quadrature-point-iterators-1","page":"Types","title":"Quadrature-point iterators","text":"","category":"section"},{"location":"man/types.html#","page":"Types","title":"Types","text":"QPIterators.QPIterator","category":"page"},{"location":"man/types.html#Elfel.QPIterators.QPIterator","page":"Types","title":"Elfel.QPIterators.QPIterator","text":"QPIterator{FES, MDIM}\n\nType of quadrature-point iterator, parameterized by \n\nFES: the type of the finite element space, \nMDIM: the manifold dimension of the finite element.\n\n\n\n\n\n","category":"type"},{"location":"man/types.html#Assemblers-1","page":"Types","title":"Assemblers","text":"","category":"section"},{"location":"man/types.html#","page":"Types","title":"Types","text":"Assemblers.AbstractSysmatAssembler\nAssemblers.SysmatAssemblerSparse\nAssemblers.AbstractSysvecAssembler\nAssemblers.SysvecAssembler","category":"page"},{"location":"man/types.html#Elfel.Assemblers.AbstractSysmatAssembler","page":"Types","title":"Elfel.Assemblers.AbstractSysmatAssembler","text":"AbstractSysmatAssembler\n\nAbstract type of system-matrix assembler.\n\n\n\n\n\n","category":"type"},{"location":"man/types.html#Elfel.Assemblers.SysmatAssemblerSparse","page":"Types","title":"Elfel.Assemblers.SysmatAssemblerSparse","text":"SysmatAssemblerSparse{T<:Number} <: AbstractSysmatAssembler\n\nType for assembling a sparse global matrix from individual entries.\n\n\n\n\n\n","category":"type"},{"location":"man/types.html#Elfel.Assemblers.AbstractSysvecAssembler","page":"Types","title":"Elfel.Assemblers.AbstractSysvecAssembler","text":"AbstractSysvecAssembler\n\nAbstract type of system vector assembler.\n\n\n\n\n\n","category":"type"},{"location":"man/types.html#Elfel.Assemblers.SysvecAssembler","page":"Types","title":"Elfel.Assemblers.SysvecAssembler","text":"SysvecAssembler\n\nAssembler for the system vector.\n\n\n\n\n\n","category":"type"},{"location":"man/types.html#Local-Assemblers-1","page":"Types","title":"Local Assemblers","text":"","category":"section"},{"location":"man/types.html#","page":"Types","title":"Types","text":"LocalAssemblers.LocalMatrixAssembler\nLocalAssemblers.LocalVectorAssembler","category":"page"},{"location":"man/types.html#Elfel.LocalAssemblers.LocalMatrixAssembler","page":"Types","title":"Elfel.LocalAssemblers.LocalMatrixAssembler","text":"LocalMatrixAssembler{IT<:Integer, T<:Number} <: AbstractArray{T, 2}\n\nType of \"local\" matrix assembler.\n\nLocal is to be understood in the sense of in the context of a single finite element. So a local matrix is an elementwise matrix which is computed entry by entry. Then it can be assembled into the global matrix in one shot.\n\n\n\n\n\n","category":"type"},{"location":"man/types.html#Elfel.LocalAssemblers.LocalVectorAssembler","page":"Types","title":"Elfel.LocalAssemblers.LocalVectorAssembler","text":"LocalVectorAssembler{IT<:Integer, T<:Number} <: AbstractArray{T, 1}\n\nType of \"local\" vector assembler.\n\nLocal is to be understood in the sense of in the context of a single finite element. So a local vector is an elementwise vector which is computed entry by entry. Then it can be assembled into the global vector in one shot.\n\n\n\n\n\n","category":"type"},{"location":"man/types.html#Index-1","page":"Types","title":"Index","text":"","category":"section"},{"location":"man/types.html#","page":"Types","title":"Types","text":"","category":"page"},{"location":"man/functions.html#Functions-1","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"man/functions.html#","page":"Functions","title":"Functions","text":"CurrentModule = Elfel","category":"page"},{"location":"man/functions.html#Reference-shapes-1","page":"Functions","title":"Reference shapes","text":"","category":"section"},{"location":"man/functions.html#","page":"Functions","title":"Functions","text":"RefShapes.manifdim\nRefShapes.manifdimv\nRefShapes.quadrature","category":"page"},{"location":"man/functions.html#Elfel.RefShapes.manifdim","page":"Functions","title":"Elfel.RefShapes.manifdim","text":"manifdim(rs)\n\nGet the manifold dimension of the reference shape.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.RefShapes.manifdimv","page":"Functions","title":"Elfel.RefShapes.manifdimv","text":"manifdimv(::Type{T}) where {T<:AbstractRefShape{MANIFDIM}} where {MANIFDIM}\n\nGet the manifold dimension of the reference shape as Val. \n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.RefShapes.quadrature","page":"Functions","title":"Elfel.RefShapes.quadrature","text":"quadrature(::Type{RefShapeInterval}, quadraturesettings = (kind = :default,))\n\nCreate a quadrature rule for the reference shape of an interval.\n\nThe default is Gauss integration rule, where the order is set with the keyword order.\n\n\n\n\n\nquadrature(::Type{RefShapeTriangle}, quadraturesettings = (kind = :default,))\n\nCreate a quadrature rule for the reference shape of an triangle.\n\nThe default is a triangle rule, distinguished by the number of points set with the keyword npts.\n\n\n\n\n\nquadrature(::Type{RefShapeSquare}, quadraturesettings = (kind = :default,))\n\nCreate a quadrature rule for the reference shape of a square.\n\nThe default is Gauss integration rule, where the order is set with the keyword order.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elements-1","page":"Functions","title":"Elements","text":"","category":"section"},{"location":"man/functions.html#","page":"Functions","title":"Functions","text":"FElements.shapedesc\nFElements.refshape\nFElements.nfeatofdim\nFElements.ndofperfeat\nFElements.ndofsperel\nFElements.manifdim\nFElements.Jacobian\nFElements.jacjac\nFElements.bfun\nFElements.bfungradpar\nFElements.FEH1_L2\nFElements.FEH1_T3\nFElements.FEH1_Q4\nFElements.FEH1_T6\nFElements.FEH1_T3_BUBBLE","category":"page"},{"location":"man/functions.html#Elfel.FElements.shapedesc","page":"Functions","title":"Elfel.FElements.shapedesc","text":"shapedesc(fe::FE{RS, SD}) where {RS, SD}\n\nTopological shape description.\n\nRefer to the MeshCore library.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FElements.refshape","page":"Functions","title":"Elfel.FElements.refshape","text":"refshape(fe::FE{RS, SD}) where {RS, SD}\n\nReference shape.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FElements.nfeatofdim","page":"Functions","title":"Elfel.FElements.nfeatofdim","text":"nfeatofdim(fe::FE{RS, SD}, m) where {RS, SD}\n\nNumber of features of manifold dimension m. Note that 0 <= m <= 3.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FElements.ndofperfeat","page":"Functions","title":"Elfel.FElements.ndofperfeat","text":"feathasdof(fe::FE{RS, SD}, m) where {RS, SD}\n\nHow many degrees of freedom are attached to a the feature of manifold dimension m?\n\nNote that 0 <= m <= 3.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FElements.ndofsperel","page":"Functions","title":"Elfel.FElements.ndofsperel","text":"ndofsperel(it::FEIterator)\n\nRetrieve the number of degrees of freedom per element.\n\n\n\n\n\nndofsperel(fesp::FES)  where {FES<:FESpace}\n\nTotal number of degrees of freedom associated with each finite element.\n\nEssentially a product of the number of the degrees of freedom the scalar finite element and the number of copies of this element in the space.\n\n\n\n\n\nndofsperel(fe::FE{RS, SD}) where {RS, SD}\n\nProvide the number of degrees of freedom per element.\n\nEnumerate all features of all manifold dimensions, and for each feature multiply by the number of degrees of freedom per feature. The assumption is that this is a scalar finite element.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#MeshCore.manifdim","page":"Functions","title":"MeshCore.manifdim","text":"manifdim(fe::FE{RS, SD}) where {RS, SD}\n\nGet the manifold dimension of the finite element.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FElements.Jacobian","page":"Functions","title":"Elfel.FElements.Jacobian","text":"Jacobian(::Val{0}, J::T) where {T}\n\nEvaluate the point Jacobian.\n\nJ = Jacobian matrix, which isn't really defined well for a 0-manifold.\n\n\n\n\n\nJacobian(::Val{1}, J::T) where {T}\n\nEvaluate the curve Jacobian.\n\nJ = Jacobian matrix, columns are tangent to parametric coordinates curves.\n\n\n\n\n\nJacobian(::Val{2}, J::T) where {T}\n\nEvaluate the curve Jacobian.\n\nJ = Jacobian matrix, columns are tangent to parametric coordinates curves.\n\n\n\n\n\nJacobian(self::T, J::FFltMat)::FFlt where {T<:AbstractFESet3Manifold}\n\nEvaluate the volume Jacobian.\n\nJ = Jacobian matrix, columns are tangent to parametric coordinates curves.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FElements.jacjac","page":"Functions","title":"Elfel.FElements.jacjac","text":"jacjac(it::FEIterator, qpit::QPIterator)\n\nCompute the Jacobian matrix and the Jacobian determinant.\n\nThe finite element iterator cooperates with the quadrature point iterator here to compute the Jacobian at the current integration point.\n\n\n\n\n\njacjac(fe::FE{RS, SD}, locs, nodes, gradNpar) where {RS, SD}\n\nCompute the Jacobian matrix and the Jacobian determinant.\n\nThis is the generic version suitable for isoparametric elements.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FElements.bfun","page":"Functions","title":"Elfel.FElements.bfun","text":"bfun(self::FESUBT,  param_coords)  where {FESUBT<:FE{RS, SD}}\n\nEvaluate the basis functions for all degrees of freedom of the scalar finite element at the parametric coordinates. Return a vector of the values.\n\n\n\n\n\nbfun(it::QPIterator)\n\nRetrieve vector of basis function values for the current quadrature point.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FElements.bfungradpar","page":"Functions","title":"Elfel.FElements.bfungradpar","text":"bfungradpar(self::FESUBT,  param_coords)  where {FESUBT<:FE{RS, SD}}\n\nEvaluate the gradients of the basis functions for all degrees of freedom of the scalar finite element with respect to the parametric coordinates, at the parametric coordinates given. Return a vector of the gradients.\n\n\n\n\n\nbfungradpar(it::QPIterator)\n\nRetrieve vector of basis function gradients with respect to the parametric coordinates for the current quadrature point.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FElements.FEH1_L2","page":"Functions","title":"Elfel.FElements.FEH1_L2","text":"FEH1_L2()\n\nConstruct an H1 finite element of the type L2.\n\nL2 is two-node linear segment element.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FElements.FEH1_T3","page":"Functions","title":"Elfel.FElements.FEH1_T3","text":"FEH1_T3()\n\nConstruct an H1 finite element of the type T3.\n\nT3 is 3-node linear triangle element.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FElements.FEH1_Q4","page":"Functions","title":"Elfel.FElements.FEH1_Q4","text":"FEH1_Q4()\n\nConstruct an H1 finite element of the type Q4.\n\nQ4 is 4-node linear quadrilateral element.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FElements.FEH1_T6","page":"Functions","title":"Elfel.FElements.FEH1_T6","text":"FEH1_T6()\n\nConstruct an H1 finite element of the type T6.\n\nT6 is 6-node quadratic triangle element.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FElements.FEH1_T3_BUBBLE","page":"Functions","title":"Elfel.FElements.FEH1_T3_BUBBLE","text":"FEH1_T3_BUBBLE()\n\nConstruct an H1 finite element of the type T3 with a cubic bubble.\n\nT3 is 3-node linear triangle element with a cubic bubble. It has the usual nodal basis functions associated with the vertices, and cubic bubble associated with the element itself.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Fields-1","page":"Functions","title":"Fields","text":"","category":"section"},{"location":"man/functions.html#","page":"Functions","title":"Functions","text":"FEFields.doftype\nFEFields.dofnumtype\nFEFields.nterms\nFEFields.ndofsperterm\nFEFields.ndofs\nFEFields.setebc!\nFEFields.numberfreedofs!\nFEFields.numberdatadofs!\nFEFields.freedofnums\nFEFields.datadofnums\nFEFields.highestfreedofnum\nFEFields.highestdatadofnum\nFEFields.gathersysvec!\nFEFields.scattersysvec!","category":"page"},{"location":"man/functions.html#Elfel.FEFields.doftype","page":"Functions","title":"Elfel.FEFields.doftype","text":"doftype(fef::FEField{N, T, IT}) where {N, T, IT}\n\nType of a degree of freedom value.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FEFields.dofnumtype","page":"Functions","title":"Elfel.FEFields.dofnumtype","text":"dofnumtype(fef::FEField{N, T, IT}) where {N, T, IT}\n\nType of the index (serial number) of the degree of freedom. Integer.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FEFields.nterms","page":"Functions","title":"Elfel.FEFields.nterms","text":"nterms(fef::FEField)\n\nNumber of terms in the field.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FEFields.ndofsperterm","page":"Functions","title":"Elfel.FEFields.ndofsperterm","text":"ndofsperterm(fef::FEField{N}) where {N}\n\nNumber of degrees of freedom per term of the field.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FEFields.ndofs","page":"Functions","title":"Elfel.FEFields.ndofs","text":"ndofs(fesp::FES)  where {FES<:FESpace}\n\nCompute the total number of degrees of freedom.\n\n\n\n\n\nndofs(fef::FEField)\n\nTotal number of degrees of freedom in the field.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FEFields.setebc!","page":"Functions","title":"Elfel.FEFields.setebc!","text":"setebc!(fesp::FESpace, mid, eid, comp, val::T) where {T}\n\nSet the EBCs (essential boundary conditions).\n\nmid  = manifold dimension of the entity,\neid  = serial number of the entity (term identifier),\ncomp = which  degree of freedom in the term,\nval  = value of type T\n\nFor instance, mid = 0 means set  the degree of freedom at the vertex eid.\n\n\n\n\n\nsetebc!(self::FEField, tid, comp, val::T) where {T}\n\nSet the value of one particular degree of freedom to a given number.\n\ntid: which term, \ncomp: which component of the term, \nval: value to which the degree of freedom should be set.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FEFields.numberfreedofs!","page":"Functions","title":"Elfel.FEFields.numberfreedofs!","text":"numberfreedofs!(fesp::FES, firstnum = 1)  where {FES<:FESpace}\n\nNumber the free degrees of freedom.\n\nThe unknown degrees of freedom in the FE space are numbered consecutively. \n\nNo effort is made to optimize the numbering in any way. \n\n\n\n\n\nnumberfreedofs!(f::FEField, firstnum = 1)\n\nNumber the unknowns in the field, starting from the one supplied on input.\n\nNote: The data degrees of freedom have their numbers zeroed out.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FEFields.numberdatadofs!","page":"Functions","title":"Elfel.FEFields.numberdatadofs!","text":"numberdatadofs!(fesp::FES, firstnum = 1)  where {FES<:FESpace}\n\nNumber the data (known) degrees of freedom.\n\nThe known degrees of freedom in the FE space are numbered consecutively. \n\nNo effort is made to optimize the numbering in any way. \n\n\n\n\n\nnumberdatadofs!(f::FEField, firstnum = 1)\n\nNumber the data degrees of freedom in the field. Start from the number supplied on input.\n\nNote: The free degrees of freedom must be numbered first.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FEFields.freedofnums","page":"Functions","title":"Elfel.FEFields.freedofnums","text":"freedofnums(f::FEField)\n\nCollect information about unknown (free) degree of freedom numbers.\n\nFirst number, last number, and the total number of degrees of freedom are returned as a tuple.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FEFields.datadofnums","page":"Functions","title":"Elfel.FEFields.datadofnums","text":"datadofnums(f::FEField)\n\nCollect information about known (data) degree of freedom numbers.\n\nFirst number, last number, and the total number of degrees of freedom are returned as a tuple.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FEFields.highestfreedofnum","page":"Functions","title":"Elfel.FEFields.highestfreedofnum","text":"highestfreedofnum(fesp::FES)  where {FES<:FESpace}\n\nCompute the highest number of free (unknown) degrees of freedom.\n\n\n\n\n\nhighestfreedofnum(f::FEField)\n\nCompute the highest serial number of a free degree of freedom in the field.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FEFields.highestdatadofnum","page":"Functions","title":"Elfel.FEFields.highestdatadofnum","text":"highestfreedofnum(fesp::FES)  where {FES<:FESpace}\n\nCompute the highest number of data (known) degrees of freedom.\n\n\n\n\n\nhighestdatadofnum(f::FEField)\n\nCompute the highest serial number of a datum degree of freedom in the field.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FEFields.gathersysvec!","page":"Functions","title":"Elfel.FEFields.gathersysvec!","text":"gathersysvec!(v, fesp::FESpace)\n\nGather values for the whole system vector.\n\n\n\n\n\ngathersysvec!(v, fesp)\n\nGather values for the whole system vector from all FE spaces contributing to it.\n\nfesp is either a vector or a tuple of FE spaces.\n\n\n\n\n\ngathersysvec!(vec, self::FEField)\n\nGather system vector contributions from the field.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FEFields.scattersysvec!","page":"Functions","title":"Elfel.FEFields.scattersysvec!","text":"scattersysvec!(fesp::FESpace, v)\n\nScatter values from the system vector.\n\n\n\n\n\nscattersysvec!(fesp, v)\n\nScatter values for the whole system vector to all FE spaces contributing to it.\n\nfesp is either a vector or a tuple of FE spaces.\n\n\n\n\n\nscattersysvec!(self::FEField, v)\n\nScatter a system vector into the field.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Spaces-1","page":"Functions","title":"Spaces","text":"","category":"section"},{"location":"man/functions.html#","page":"Functions","title":"Functions","text":"FESpaces.doftype\nFESpaces.edofmdim\nFESpaces.edofbfnum\nFESpaces.edofcompnt\nFESpaces.ndofsperel(fesp::FESpaces.FESpace)\nFESpaces.numberfreedofs!(fesp::FESpaces.FESpace, firstnum = 1)\nFESpaces.numberdatadofs!(fesp::FESpaces.FESpace, firstnum = 0)\nFESpaces.ndofs(fesp::FESpaces.FESpace)\nFESpaces.nunknowns\nFESpaces.highestfreedofnum(fesp::FESpaces.FESpace)\nFESpaces.highestdatadofnum(fesp::FESpaces.FESpace)\nFESpaces.numberdofs!\nFESpaces.setebc!(fesp::FESpaces.FESpace, mid, eid, comp, val)\nFESpaces.gathersysvec!(v, fesp::FESpaces.FESpace)\nFESpaces.gathersysvec!(v, fesp::AbstractVector) \nFESpaces.scattersysvec!(fesp::FESpaces.FESpace, v)\nFESpaces.scattersysvec!(fesp::AbstractVector, v) \nFESpaces.makeattribute","category":"page"},{"location":"man/functions.html#Elfel.FESpaces.doftype","page":"Functions","title":"Elfel.FESpaces.doftype","text":"doftype(fesp::FESpace{FET, T}) where {FET, T}\n\nProvide the type of the values of the degrees of freedom.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FESpaces.edofmdim","page":"Functions","title":"Elfel.FESpaces.edofmdim","text":"edofmdim(fesp::FESpace{FET, T}) where {FET, T}\n\nAccess vector of manifold dimensions of entities associated with each degree of freedom.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FESpaces.edofbfnum","page":"Functions","title":"Elfel.FESpaces.edofbfnum","text":"edofbfnum(fesp::FESpace{FET, T}) where {FET, T}\n\nAccess vector of numbers of basis functions associated with each degree of freedom.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FESpaces.edofcompnt","page":"Functions","title":"Elfel.FESpaces.edofcompnt","text":"edofcompnt(fesp::FESpace{FET, T}) where {FET, T}\n\nAccess vector of component number associated with each degree of freedom.\n\nWhen the finite element space consists of multiple copies of the scalar finite element, the component is the serial number of the copy.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FElements.ndofsperel-Tuple{Elfel.FESpaces.FESpace}","page":"Functions","title":"Elfel.FElements.ndofsperel","text":"ndofsperel(fesp::FES)  where {FES<:FESpace}\n\nTotal number of degrees of freedom associated with each finite element.\n\nEssentially a product of the number of the degrees of freedom the scalar finite element and the number of copies of this element in the space.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#Elfel.FEFields.numberfreedofs!","page":"Functions","title":"Elfel.FEFields.numberfreedofs!","text":"numberfreedofs!(fesp::FES, firstnum = 1)  where {FES<:FESpace}\n\nNumber the free degrees of freedom.\n\nThe unknown degrees of freedom in the FE space are numbered consecutively. \n\nNo effort is made to optimize the numbering in any way. \n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FEFields.numberdatadofs!","page":"Functions","title":"Elfel.FEFields.numberdatadofs!","text":"numberdatadofs!(fesp::FES, firstnum = 1)  where {FES<:FESpace}\n\nNumber the data (known) degrees of freedom.\n\nThe known degrees of freedom in the FE space are numbered consecutively. \n\nNo effort is made to optimize the numbering in any way. \n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FEFields.ndofs-Tuple{Elfel.FESpaces.FESpace}","page":"Functions","title":"Elfel.FEFields.ndofs","text":"ndofs(fesp::FES)  where {FES<:FESpace}\n\nCompute the total number of degrees of freedom.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#Elfel.FESpaces.nunknowns","page":"Functions","title":"Elfel.FESpaces.nunknowns","text":"nunknowns(fesp::FES)  where {FES<:FESpace}\n\nCompute the total number of unknown degrees of freedom.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FEFields.highestfreedofnum-Tuple{Elfel.FESpaces.FESpace}","page":"Functions","title":"Elfel.FEFields.highestfreedofnum","text":"highestfreedofnum(fesp::FES)  where {FES<:FESpace}\n\nCompute the highest number of free (unknown) degrees of freedom.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#Elfel.FEFields.highestdatadofnum-Tuple{Elfel.FESpaces.FESpace}","page":"Functions","title":"Elfel.FEFields.highestdatadofnum","text":"highestfreedofnum(fesp::FES)  where {FES<:FESpace}\n\nCompute the highest number of data (known) degrees of freedom.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#Elfel.FESpaces.numberdofs!","page":"Functions","title":"Elfel.FESpaces.numberdofs!","text":"numberdofs!(fesp...)\n\nNumber the degrees of freedom of a collection of FE spaces.\n\nThe unknown (free) degrees of freedom in the FE space are numbered consecutively, and then the data degrees of freedom (the known values) are numbered. \n\nNo effort is made to optimize the numbering in any way. \n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FEFields.setebc!-Tuple{Elfel.FESpaces.FESpace,Any,Any,Any,Any}","page":"Functions","title":"Elfel.FEFields.setebc!","text":"setebc!(fesp::FESpace, mid, eid, comp, val::T) where {T}\n\nSet the EBCs (essential boundary conditions).\n\nmid  = manifold dimension of the entity,\neid  = serial number of the entity (term identifier),\ncomp = which  degree of freedom in the term,\nval  = value of type T\n\nFor instance, mid = 0 means set  the degree of freedom at the vertex eid.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#Elfel.FEFields.gathersysvec!-Tuple{Any,Elfel.FESpaces.FESpace}","page":"Functions","title":"Elfel.FEFields.gathersysvec!","text":"gathersysvec!(v, fesp::FESpace)\n\nGather values for the whole system vector.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#Elfel.FEFields.gathersysvec!-Tuple{Any,AbstractArray{T,1} where T}","page":"Functions","title":"Elfel.FEFields.gathersysvec!","text":"gathersysvec!(v, fesp)\n\nGather values for the whole system vector from all FE spaces contributing to it.\n\nfesp is either a vector or a tuple of FE spaces.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#Elfel.FEFields.scattersysvec!-Tuple{Elfel.FESpaces.FESpace,Any}","page":"Functions","title":"Elfel.FEFields.scattersysvec!","text":"scattersysvec!(fesp::FESpace, v)\n\nScatter values from the system vector.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#Elfel.FEFields.scattersysvec!-Tuple{AbstractArray{T,1} where T,Any}","page":"Functions","title":"Elfel.FEFields.scattersysvec!","text":"scattersysvec!(fesp, v)\n\nScatter values for the whole system vector to all FE spaces contributing to it.\n\nfesp is either a vector or a tuple of FE spaces.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#Elfel.FESpaces.makeattribute","page":"Functions","title":"Elfel.FESpaces.makeattribute","text":"makeattribute(fesp::FESpace, name, comp)\n\nAttach attribute to the right shape collection of all incidence relations. \n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Finite-element-iterators-1","page":"Functions","title":"Finite element iterators","text":"","category":"section"},{"location":"man/functions.html#","page":"Functions","title":"Functions","text":"Base.iterate\nFEIterators.ndofsperel(it::FEIterators.FEIterator)\nFEIterators.eldofs\nFEIterators.elnodes\nFEIterators.eldofentmdims\nFEIterators.eldofcomps\nFEIterators.jacjac(it::FEIterators.FEIterator, qpit::QPIterators.QPIterator)","category":"page"},{"location":"man/functions.html#Base.iterate","page":"Functions","title":"Base.iterate","text":"Base.iterate(it::FEIterator, state = 1)\n\nAdvance the iterator to the next entity.\n\nThe nodes of the finite element are cached, as is a vector of all the degrees of freedom represented on the element.\n\n\n\n\n\nBase.iterate(it::QPIterator, state = 1)\n\nAdvance a quadrature point iterator.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FElements.ndofsperel-Tuple{Elfel.FEIterators.FEIterator}","page":"Functions","title":"Elfel.FElements.ndofsperel","text":"ndofsperel(it::FEIterator)\n\nRetrieve the number of degrees of freedom per element.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#Elfel.FEIterators.eldofs","page":"Functions","title":"Elfel.FEIterators.eldofs","text":"eldofs(it::FEIterator)\n\nRetrieve the vector of the element degrees of freedom\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FEIterators.elnodes","page":"Functions","title":"Elfel.FEIterators.elnodes","text":"elnodes(it::FEIterator)\n\nRetrieve the vector of the nodes of the element.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FEIterators.eldofentmdims","page":"Functions","title":"Elfel.FEIterators.eldofentmdims","text":"eldofentmdims(it::FEIterator)\n\nRetrieve the vector of the entity dimensions for each element degree of freedom.\n\nEach degree of freedom is associated with some entity of the finite element: vertices, edges, faces, and so on. This vector records the dimension of the manifold entity with which each degree of freedom is associated.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FEIterators.eldofcomps","page":"Functions","title":"Elfel.FEIterators.eldofcomps","text":"eldofcomps(it::FEIterator)\n\nRetrieve the vector of the component numbers for each element degree of freedom.\n\nIf multiple copies of the finite element are referenced in the finite element space, each copy is referred to as component.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.FElements.jacjac-Tuple{Elfel.FEIterators.FEIterator,Elfel.QPIterators.QPIterator}","page":"Functions","title":"Elfel.FElements.jacjac","text":"jacjac(it::FEIterator, qpit::QPIterator)\n\nCompute the Jacobian matrix and the Jacobian determinant.\n\nThe finite element iterator cooperates with the quadrature point iterator here to compute the Jacobian at the current integration point.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#Quadrature-point-iterators-1","page":"Functions","title":"Quadrature-point iterators","text":"","category":"section"},{"location":"man/functions.html#","page":"Functions","title":"Functions","text":"Base.iterate\nQPIterators.bfun(it::QPIterators.QPIterator)\nQPIterators.bfungradpar(it::QPIterators.QPIterator)\nQPIterators.bfungrad\nQPIterators.weight","category":"page"},{"location":"man/functions.html#Elfel.FElements.bfun-Tuple{Elfel.QPIterators.QPIterator}","page":"Functions","title":"Elfel.FElements.bfun","text":"bfun(it::QPIterator)\n\nRetrieve vector of basis function values for the current quadrature point.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#Elfel.FElements.bfungradpar-Tuple{Elfel.QPIterators.QPIterator}","page":"Functions","title":"Elfel.FElements.bfungradpar","text":"bfungradpar(it::QPIterator)\n\nRetrieve vector of basis function gradients with respect to the parametric coordinates for the current quadrature point.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#Elfel.QPIterators.bfungrad","page":"Functions","title":"Elfel.QPIterators.bfungrad","text":"bfungrad(it::QPIterator, Jac)\n\nRetrieve vector of basis function gradients with respect to spatial coordinates for the current quadrature point.\n\nThe Jacobian matrix maps between vectors in the parametric space and the spatial vectors.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.QPIterators.weight","page":"Functions","title":"Elfel.QPIterators.weight","text":"weight(it::QPIterator)\n\nRetrieve weight of the current quadrature point.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Assemblers-1","page":"Functions","title":"Assemblers","text":"","category":"section"},{"location":"man/functions.html#","page":"Functions","title":"Functions","text":"Assemblers.SysmatAssemblerSparse(zero::T=0.0) where {T<:Number}\nAssemblers.start!\nAssemblers.assemble!\nAssemblers.finish!\nAssemblers.SysvecAssembler(zero::T=0.0) where {T<:Number}","category":"page"},{"location":"man/functions.html#Elfel.Assemblers.SysmatAssemblerSparse-Union{Tuple{}, Tuple{T}, Tuple{T}} where T<:Number","page":"Functions","title":"Elfel.Assemblers.SysmatAssemblerSparse","text":"SysmatAssemblerSparse(zero::T=0.0) where {T<:Number}\n\nConstruct blank system matrix assembler. The matrix entries are of type T.\n\nExample\n\nThis is how a sparse matrix is assembled from two rectangular dense matrices.\n\na = SysmatAssemblerSparse(0.0)                                                        \nstart!(a, 7, 7)  \nm = [0.24406   0.599773    0.833404  0.0420141                                             \n0.786024  0.00206713  0.995379  0.780298                                              \n0.845816  0.198459    0.355149  0.224996]     \ngi = [1 7 5]             \ngj = [5 2 1 4]       \nfor j in 1:size(m, 2), i in 1:size(m, 1)\n    assemble!(a, gi[i], gj[j], m[i, j])       \nend  \nm = [0.146618  0.53471   0.614342    0.737833                                              \n0.479719  0.41354   0.00760941  0.836455                                              \n0.254868  0.476189  0.460794    0.00919633                                            \n0.159064  0.261821  0.317078    0.77646                                               \n0.643538  0.429817  0.59788     0.958909]                                   \ngi =  [2 3 1 7 5]\ngj = [6 7 3 4]   \nfor j in 1:size(m, 2), i in 1:size(m, 1)\n    assemble!(a, gi[i], gj[j], m[i, j])       \nend                               \nA = finish!(a) \n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#Elfel.Assemblers.start!","page":"Functions","title":"Elfel.Assemblers.start!","text":"start!(self::SysmatAssemblerSparse{T}, nrow, ncol) where {T<:Number}\n\nStart the assembly of a global matrix.\n\n\n\n\n\nstart!(self::SV,  nrow) where {SV<:AbstractSysvecAssembler, T<:Number}\n\nStart assembly.\n\nThe method makes the buffer for the vector assembly. It must be called before the first call to the method assemble.\n\nnrow= Total number of degrees of freedom.\n\n\n\n\n\nstart!(self::SysvecAssembler{T},  nrow::Int64) where {T<:Number}\n\nStart assembly.\n\nThe method makes the buffer for the vector assembly. It must be called before the first call to the method assemble.\n\nnrow= Total number of degrees of freedom.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.Assemblers.assemble!","page":"Functions","title":"Elfel.Assemblers.assemble!","text":"assemble!(self::SysmatAssemblerSparse{T}, r, c, v::T) where {T<:Number}\n\nAssemble a single entry of a rectangular matrix.\n\n\n\n\n\nassemble!(self::SysmatAssemblerSparse{T}, lma::LocalMatrixAssembler{IT, T}) where {IT<:Integer, T<:Number}\n\nAssemble the row numbers, column numbers, and values from a local assembler.\n\n\n\n\n\nassemble!(self::SysmatAssemblerSparse{T}, lma::Transpose{T,LocalMatrixAssembler{IT,T}}) where {IT<:Integer, T<:Number}\n\nAssemble the row numbers, column numbers, and values from a local assembler.\n\n\n\n\n\nassemble!(self::SV, i, val::T) where {SV<:AbstractSysvecAssembler, T<:Number}\n\nAssemble an elementwise vector.\n\nThe method assembles a column element vector using the vector of degree of freedom numbers for the rows.\n\n\n\n\n\nassemble!(self::SysvecAssembler{T}, i, val::T) where {T<:Number}\n\nAssemble a single value into the row i.\n\n\n\n\n\nassemble!(self::SysvecAssembler{T}, lva) where {T<:Number}\n\nAssemble local vector assembler.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.Assemblers.finish!","page":"Functions","title":"Elfel.Assemblers.finish!","text":"finish!(self::SysmatAssemblerSparse)\n\nMake a sparse matrix.\n\n\n\n\n\nmakevector!(self::SysvecAssembler)\n\nMake the global vector.\n\n\n\n\n\nfinish!(self::SysvecAssembler)\n\nMake the global vector.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.Assemblers.SysvecAssembler-Union{Tuple{}, Tuple{T}, Tuple{T}} where T<:Number","page":"Functions","title":"Elfel.Assemblers.SysvecAssembler","text":"SysvecAssembler(zero::T=0.0) where {T<:Number}\n\nConstruct blank system vector assembler. The vector entries are of type T.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#Local-Assemblers-1","page":"Functions","title":"Local Assemblers","text":"","category":"section"},{"location":"man/functions.html#","page":"Functions","title":"Functions","text":"LocalAssemblers.LocalMatrixAssembler(nrow::IT, ncol::IT, z::T) where {IT, T}\nLocalAssemblers.LocalVectorAssembler(nrow::IT, z::T) where {IT, T}\nBase.size\nBase.getindex\nBase.setindex!\nLocalAssemblers.init!","category":"page"},{"location":"man/functions.html#Elfel.LocalAssemblers.LocalMatrixAssembler-Union{Tuple{T}, Tuple{IT}, Tuple{IT,IT,T}} where T where IT","page":"Functions","title":"Elfel.LocalAssemblers.LocalMatrixAssembler","text":"LocalMatrixAssembler(nrow::IT, ncol::IT, z::T) where {IT, T}\n\nCreate a local matrix assembler, given the number of rows and columns, and the value to which the matrix should be initialized.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#Elfel.LocalAssemblers.LocalVectorAssembler-Union{Tuple{T}, Tuple{IT}, Tuple{IT,T}} where T where IT","page":"Functions","title":"Elfel.LocalAssemblers.LocalVectorAssembler","text":"LocalVectorAssembler(nrow::IT, z::T) where {IT, T}\n\nCreate a local vector assembler, given the number of entries, and the value to which the vector should be initialized.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#Base.size","page":"Functions","title":"Base.size","text":"Base.size(a::A) where {A<:LocalMatrixAssembler}\n\nThe size is the tuple of number of rows and number of columns.\n\n\n\n\n\nBase.size(a::A) where {A<:LocalVectorAssembler}\n\nThe size is the number of rows (entries).\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Base.getindex","page":"Functions","title":"Base.getindex","text":"Base.getindex(a::A, i::Int, j::Int)\n\nOnly access to a single entry of the matrix is  provided.\n\n\n\n\n\nBase.getindex(a::A, i::Int) where {A<:LocalVectorAssembler}\n\nAccess is provided to a single entry of the vector.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Base.setindex!","page":"Functions","title":"Base.setindex!","text":"Base.setindex!(a::A, v, i::Int, j::Int) where {A<:LocalMatrixAssembler}\n\nOnly access to a single entry of the matrix is  provided.\n\n\n\n\n\nBase.setindex!(a::A, v, i::Int) where {A<:LocalVectorAssembler}\n\nAccess is provided to a single entry of the vector.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Elfel.LocalAssemblers.init!","page":"Functions","title":"Elfel.LocalAssemblers.init!","text":"init!(a::L, rdofs, cdofs) where {L<:LocalMatrixAssembler{IT, T}} where {IT, T}\n\nInitialize the  local assembler with the global degrees of freedom in the rows and columns.\n\nThe two arrays, rdofs, cdofs, define the global degree of freedom numbers for the element. The data matrix is zeroed out. \n\nThis function needs to be called for each new finite element.\n\n\n\n\n\ninit!(a::L, rdofs) where {L<:LocalVectorAssembler{IT, T}} where {IT, T}\n\nInitialize the  local assembler with the global degrees of freedom in the rows.\n\nThe array rdofs defines the global degree of freedom numbers for the element. The data vector is zeroed out. \n\nThis function needs to be called for each new finite element.\n\n\n\n\n\n","category":"function"},{"location":"man/functions.html#Index-1","page":"Functions","title":"Index","text":"","category":"section"},{"location":"man/functions.html#","page":"Functions","title":"Functions","text":"","category":"page"}]
}
